// <auto-generated />
using System;
using ECommerce.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerce.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250520064521_dbUpdateAuthorization")]
    partial class dbUpdateAuthorization
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECommerce.Domain.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.CartItem", b =>
                {
                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItem", (string)null);
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3156994b-be86-4e69-b0c3-b383ab203a12"),
                            CreatedAt = new DateTime(2024, 3, 22, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Các loại điện thoại",
                            Name = "Điện thoại"
                        },
                        new
                        {
                            Id = new Guid("a9ea7cd2-f475-4a7c-9f25-7116f4073c64"),
                            CreatedAt = new DateTime(2024, 3, 22, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Máy tính xách tay",
                            Name = "Laptop"
                        },
                        new
                        {
                            Id = new Guid("a02a5c5a-f789-4bfe-abff-064ded0a2cde"),
                            CreatedAt = new DateTime(2024, 3, 22, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tai nghe, sạc, v.v.",
                            Name = "Phụ kiện"
                        },
                        new
                        {
                            Id = new Guid("878dfce8-75e5-4a2b-ba2f-a05322e18239"),
                            CreatedAt = new DateTime(2024, 3, 22, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Máy lạnh, tủ lạnh",
                            Name = "Đồ gia dụng"
                        },
                        new
                        {
                            Id = new Guid("296a460b-3216-4557-983c-58c58d87fdf7"),
                            CreatedAt = new DateTime(2024, 3, 22, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Các loại tivi, màn hình",
                            Name = "TV & Màn hình"
                        });
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("StripePaymentIntentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permission", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b867733f-fbbb-410b-b7f6-0c667d40a229"),
                            Description = "View data",
                            Name = "Read"
                        },
                        new
                        {
                            Id = new Guid("3ef0841e-bd88-4e27-8642-603c805462f9"),
                            Description = "Add new data",
                            Name = "Create"
                        },
                        new
                        {
                            Id = new Guid("34ae215d-c182-4c9f-b745-b8986d36dc36"),
                            Description = "Modify data",
                            Name = "Update"
                        },
                        new
                        {
                            Id = new Guid("95747c1e-fc1f-48ec-b108-34af7da5bce2"),
                            Description = "Remove data",
                            Name = "Delete"
                        });
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c107fe9b-ae3e-4b74-bb43-0d390c79d486"),
                            CategoryId = new Guid("3156994b-be86-4e69-b0c3-b383ab203a12"),
                            CreatedAt = new DateTime(2024, 3, 22, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Điện thoại cao cấp với camera 48MP và chip A16 Bionic",
                            Name = "iPhone 14 Pro",
                            Price = 27990000m,
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = new Guid("f19411a4-e9dd-41af-9773-73051ab930a5"),
                            CategoryId = new Guid("3156994b-be86-4e69-b0c3-b383ab203a12"),
                            CreatedAt = new DateTime(2024, 3, 22, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Smartphone flagship với bút S-Pen và camera 200MP",
                            Name = "Samsung S23 Ultra",
                            Price = 30990000m,
                            StockQuantity = 40
                        },
                        new
                        {
                            Id = new Guid("4e3d18ea-474a-4a7d-96d9-89e6545d626b"),
                            CategoryId = new Guid("a02a5c5a-f789-4bfe-abff-064ded0a2cde"),
                            CreatedAt = new DateTime(2024, 3, 22, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tai nghe không dây với chất lượng âm thanh tốt và chống ồn chủ động",
                            Name = "Tai nghe AirPods",
                            Price = 4990000m,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = new Guid("a1034129-c1fd-42d5-9773-b878fde40e1a"),
                            CategoryId = new Guid("a9ea7cd2-f475-4a7c-9f25-7116f4073c64"),
                            CreatedAt = new DateTime(2024, 3, 22, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ultrabook cao cấp với màn hình 4K OLED và CPU Intel Core i9",
                            Name = "Dell XPS 15",
                            Price = 45990000m,
                            StockQuantity = 25
                        });
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4ea25da4-9081-41f8-83ba-2ba6e047fcbf"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("a6f25e26-400e-4e55-97b3-94ac35fd32ee"),
                            Name = "Customer"
                        },
                        new
                        {
                            Id = new Guid("fcd2fb03-484d-4c67-9940-bf4668619e9d"),
                            Name = "Manager"
                        });
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermission", (string)null);
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1407a13-ad60-48ad-8346-8fba9cbb4f41"),
                            CreatedAt = new DateTime(2024, 3, 22, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Thanh123@gmail.com",
                            Name = "Thanh",
                            Password = "$2a$11$0/CP8hh.odVCJCJi0d261ObBVpXQ06FuX53Aiq6Fn.0pKKdcdnMz2",
                            Phone = "0985632147"
                        });
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("d1407a13-ad60-48ad-8346-8fba9cbb4f41"),
                            RoleId = new Guid("4ea25da4-9081-41f8-83ba-2ba6e047fcbf")
                        });
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.Cart", b =>
                {
                    b.HasOne("ECommerce.Domain.Entities.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("ECommerce.Domain.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("ECommerce.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Domain.Entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.Order", b =>
                {
                    b.HasOne("ECommerce.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("ECommerce.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Domain.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.Payment", b =>
                {
                    b.HasOne("ECommerce.Domain.Entities.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("ECommerce.Domain.Entities.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.Product", b =>
                {
                    b.HasOne("ECommerce.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("ECommerce.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("ECommerce.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("ECommerce.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.User", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
